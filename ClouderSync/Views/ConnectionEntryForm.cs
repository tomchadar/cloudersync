using System;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using ClouderSync.Data;
using ClouderSync.SFTPClient;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;

namespace ClouderSync.Views
{
    public partial class ConnectionEntryForm : Form
    {
        protected ClouderSyncPackage package;
        ConnectEntryData connectEntry;
        string projectDirectory = string.Empty;
        string testResult = string.Empty;
        public StringBuilder resultMessages;

        public ConnectionEntryForm(ClouderSyncPackage _package,string projectRoot=null)
        {
            package = _package;
            resultMessages = new StringBuilder();
            connectEntry = new ConnectEntryData();

            if(projectRoot!=null)
            {
                projectDirectory=projectRoot;
            }
            InitializeComponent();
            connectEntry.ReadEntry();
            if(projectDirectory!=null && projectDirectory != string.Empty)
            {
                connectEntry.ce.localsrcpath = projectDirectory;
            }
            BindControls();
        }
        #region Properties
        public string ProjectDirectory
        {
            get { return projectDirectory; }
            set { projectDirectory = value; }
        }
        #endregion
        protected void BindControls()
        {
            editHostname.DataBindings.Add(new Binding("Text", connectEntry.ce, "hostname"));
            editPort.DataBindings.Add(new Binding("Text", connectEntry.ce, "port"));
            editUsername.DataBindings.Add(new Binding("Text", connectEntry.ce, "username"));
            editPassword.DataBindings.Add(new Binding("Text", connectEntry.ce, "plainpass"));
            editKeyFile.DataBindings.Add(new Binding("Text", connectEntry.ce, "keyfile"));
            //checkUseKey.DataBindings.Add(new Binding("CheckState", connectEntry, "usekeyfile"));
            checkUseKey.DataBindings.Add(new Binding("Checked", connectEntry.ce, "usekeyfile", true,System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged));
            editLocalSrcPath.DataBindings.Add(new Binding("Text", connectEntry.ce, "localsrcpath"));
            editRemoteSrcPath.DataBindings.Add(new Binding("Text", connectEntry.ce, "remotesrcpath"));
            checkNoTransferExcludedFiles.DataBindings.Add(new Binding("Checked", connectEntry.ce, "ignoreexcludedfiles", true, System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged));
            return;
        }
        private void btnSave_Click(object sender, EventArgs e)
        {
            /*
            this.Validate();
            this.ValidateChildren();
            */
            connectEntry.SaveEntry();
            if (true)
            {
                /*
                using (XmlWriter xmlFileToWrite = XmlWriter.Create("K:\\codercrest\\connectentry.xml", new XmlWriterSettings()))
                {
                    
                    ds.WriteXml(xmlFileToWrite);
                    xmlFileToWrite.Close();
                }
                */

            }
            // Refresh the controls to show the values         
            // that were generated by the database.
            //this.productsDataGridView.Refresh();

            Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            Close();
        }
        public void AppendTextBox(string value)
        {
            if (InvokeRequired)
            {
                this.Invoke(new Action<string>(AppendTextBox), new object[] { value });
                return;
            }
            editLog.Text = value;
        }
        protected void WriteLog(string Message)
        {
            resultMessages.Append(Message);
            resultMessages.AppendLine(" \n");

            Message += '\n';
            AppendTextBox(Message);
            ClouderSyncPackage.Log(Message);
//            editLog.Text = Message;
            
        }
        private void btnPickKeyFile_Click(object sender, EventArgs e)
        {
            dlgOpenKeyFile.Multiselect = false;
            DialogResult res = dlgOpenKeyFile.ShowDialog();
            if(res== DialogResult.OK)
            {
                editKeyFile.Text = dlgOpenKeyFile.FileName;
            }
        }
        

        private void btnTestConnect_Click(object sender, EventArgs e)
        {
            connectEntry.SaveEntry();
            WriteLog("Starting connection test...");
            backgroundWorker1.RunWorkerAsync(connectEntry);
            //Site.GetUIThread().MustBeCalledFromUIThread();
            
        }

        private void ConnectionEntryForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            //CloudSyncPackage.Log(testResult);
            //CloudSyncPackage.Log();
        }

        protected bool TestConnection(ref SFTPSyncClient client)
        {
//            SFTPSyncClient client = null;
            try
            {
                client = SFTPSyncClient.Create(connectEntry.ce);
            }
            catch (Exception eClient)
            {
                WriteLog(eClient.Message);
                return false;
            }
            try
            {

                client.ConnectionInfo.Timeout = TimeSpan.FromSeconds(2);
            }
            catch(ObjectDisposedException eDisposed)
            {
                WriteLog(eDisposed.Message);
                return false;
            }
            try
            {
                client.Connect();
            }
            catch (Exception eConnect)
            {
                WriteLog(eConnect.Message);
                /*
                testResult = client.getLogMessages();
                WriteLog(testResult);
                MessageBox.Show(testResult, "Test Result", MessageBoxButtons.OK, MessageBoxIcon.Information);
                client.clearLogMessages();
                */
                return false;
            }
            /*
            testResult = client.getLogMessages();
            WriteLog(testResult);
            MessageBox.Show(testResult, "Test Result", MessageBoxButtons.OK, MessageBoxIcon.Information);
            client.clearLogMessages();
            */
            return true;
        }


        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            ClouderSyncPackage.Log("Starting connection test...");
            //            WriteLog("Starting connection test...");
            SFTPSyncClient client=null;
            resultMessages.Clear();
            TestConnection(ref client);
            testResult = resultMessages.ToString();
            if(client!=null)
            {
                testResult = client.getLogMessages();
            }
            //WriteLog(testResult);
            MessageBox.Show(testResult, "Test Result", MessageBoxButtons.OK, MessageBoxIcon.Information);


        }
    }
}
